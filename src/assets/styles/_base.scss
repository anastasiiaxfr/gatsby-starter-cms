@import url("https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Noto+Sans:ital,wght@0,100..900;1,100..900&family=Noto+Serif:ital,wght@0,100..900;1,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Rajdhani:wght@300;400;500;600;700&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    --color-main: #000;
    --color-primary: #1f2937; //#5300ff;
    --color-text: #6c6b6b;
    --color-heading: #000;
    font-family: "Montserrat", "sans-serif";

    // --bg-tertiary: #111421;
    // --bg-secondary: #0d0f18;
    // --border-card: #282a2c;
    // --bg-primary: #0d0e0f;
    // --third-menu-bg: #24272c;
    // --third-menu-hover-bg: #30343a;

}

$white: #fff;
$black: #000;
$main: var(--color-main);


$dark_1: #111621;
$dark_2: #1f2439;
$dark_3: #181c2e;
$dark_4: #0d0e0f;


$color_1: #4867aa;
$color_2: #1ea1f1;
$color_3: #007bb6;
$color_4: #fe0000;


$grad: linear-gradient(293.61deg, #f19204 -1.57%, #ffd800 108.89%);
$grad_1: linear-gradient(180deg, #713517 0%, #1a1b1b 100%);


$bxsd: 0 4px 25px 0 rgba(#231b59, 0.1);
$bxsd_2: 0 2px 0px 0 #b97208, 0 -2px 0px 0 #ffd800, 2px 0 0 0 #b97208,
    -2px 0 0 0 #ffd800;


$ffHeading: "Montserrat";
$ffText: "Montserrat";
$ffBack: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue",
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol",
    "Noto Color Emoji";

    
$xlg: 1400;
$lg: 1200;
$md: 991;
$sm: 768;
$lsm: 640;
$xsm: 520;
$xs: 480;
$xxs: 380;

$trs: all 0.35s ease-in-out;

$brs: 8px;
$brs1: 16px;
$brs2: 24px;
$brs3: 32px;
$brs4: 48px;

$gap1: 8px;
$gap2: 16px;
$gap3: 24px;
$gap4: 32px;
$gap5: 40px;
$gap6: 48px;

@mixin ft($fz, $lh: 16, $fw: 400, $ff: $ffText) {
    $lh: $lh/$fz;
    $fz: $fz/16 + rem;
    $ff: $ff, $ffBack;
    font: $fw $fz/$lh $ff;
}

@mixin theme($theme) {
    @if $theme ==white {
        background-color: $white;
        color: $black;
    }

    @if $theme == main {
        background-color: $main;
        color: $white;
    }
}

@mixin sz($w, $h) {
    width: $w;
    height: $h;
}

@mixin flex($fx, $ai, $jc, $fxw) {
    display: $fx;
    align-items: $ai;
    justify-content: $jc;
    flex-wrap: $fxw;
}

// input +padding((t, 30px), (b, 40px))
// +position(absolute, (t, 0), (r, 0))
@mixin position($ps, $val) {
    @each $x in $ps {
        @if $x ==t {
            top: $val;
        }

        @if $x ==b {
            bottom: $val;
        }

        @if $x ==l {
            left: $val;
        }

        @if $x ==r {
            right: $val;
        }
    }
}

@mixin ps($params) {
    position: nth($params, 1);

    @each $par, $val in $params {
        @if $par !=null and $val !=null {
            @include position($par, $val);
        }
    }
}

// input +padding((t, 30px), (b, 40px))
@mixin padding($pd, $val) {
    @if $pd ==t {
        padding-top: $val;
    }

    @if $pd ==b {
        padding-bottom: $val;
    }

    @if $pd ==l {
        padding-left: $val;
    }

    @if $pd ==r {
        padding-right: $val;
    }

    @if $pd ==all {
        padding: $val;
    }
}

@mixin pd($params) {
    @each $par, $val in $params {
        @if $par !=null and $val !=null {
            @include padding($par, $val);
        }
    }
}

@mixin margin($mg, $val) {
    @if $mg ==t {
        margin-top: $val;
    }

    @if $mg ==b {
        margin-bottom: $val;
    }

    @if $mg ==l {
        margin-left: $val;
    }

    @if $mg ==r {
        margin-right: $val;
    }

    @if $mg ==all {
        margin: $val;
    }
}

@mixin mg($params) {
    @each $par, $val in $params {
        @if $par !=null and $val !=null {
            @include margin($par, $val);
        }
    }
}

// =sp($prop, $params...)
// 	@if $prop == mg
// 		+mg($params)
// 	@if $prop == pd
// 		+pd($params)

$i: 0;

@mixin spacer($arr) {
    @for $val from 1 through length($arr) {
        $spr: nth($arr, 1);
    }

    @if $spr ==mg {
        @for $i from 2 through length($arr) {
            $props: nth($arr, $i);
            @include margin($props);
        }
    }

    @if $spr ==pd {
        @for $i from 2 through length($arr) {
            $props: nth($arr, $i);
            @include padding($props);
        }
    }
}

@mixin sp($x, $y) {
    @include spacer($x);
    @include spacer($y);
}

//+sp((mg, (l, 20px), (b, 15px)), (pd, (r, 10px)))

@mixin maw($brkp) {
    @media only screen and (max-width: $brkp+"px") {
        @content;
    }
}

@mixin miw($brkp) {
    @media only screen and (min-width: $brkp+"px") {
        @content;
    }
}

@mixin mw($min, $max) {
    @media only screen and (min-width: $min+"px") and (max-width: $max+"px") {
        @content;
    }
}

@function rem($val) {
    $res: $val/16 + rem;
    @return $res;
}

@function em($val) {
    $res: $val/16 + em;
    @return $res;

    //  font-size: calc([minfz] + ([maxfz] - [minfz]) * ((100vw - [miw]) / ([maw] - [miw])));
}

@mixin rfz($maw, $miw, $minfz, $maxfz) {
    $maw: $maw + px;
    $miw: $miw + px;
    $minfz: $minfz + px;
    $maxfz: $maxfz + px;

    @media only screen and (min-width: $miw) {
        font-size: calc(#{$minfz} + (#{$maxfz} - #{$minfz}) * ((100vw - #{$miw}) / (#{$maw} - #{$miw})));
    }

    @media only screen and (min-width: $maw) {
        font-size: $maxfz;
    }
}

// +rfz(1120, 320, 12, 40)


:root {
    --gapSection: 75px;
    --gap1: 8px;
    --gap2: 16px;
    --gap3: 24px;
    --gap4: 32px;
    --gap5: 40px;
    --gap6: 48px;
    --gap7: 56px;
    --gap8: 64px;
    --gap9: 72px;
    --gap10: 80px;

    @include maw($sm) {
        --gapSection: 50px;
        --gap6: 32px;
        --gap4: 24px;
    }

    @include maw($xs) {
        --gapSection: 50px;
        --gap4: 16px;
        --gap5: 32px;
        --gap10: 32px;
    }

    @include maw($xsm) {
        --sectionMt: 30px;
        --gap4: 24px;
        --gap5: 32px;
        --gap10: 32px;
    }
}
